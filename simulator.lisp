#|
 This file is a part of Wavesim
 (c) 2014 TymoonNET/NexT http://tymoon.eu (shinmera@tymoon.eu)
 Author: Nicolas Hafner <shinmera@tymoon.eu>
|#

(in-package #:org.tymoonnext.kiga.wavesim)

(defclass wave-environment ()
  ((%width :initarg :width :accessor width)
   (%height :initarg :height :accessor height)
   (%current :initarg :environment :initform NIL :accessor current)
   (%next :accessor next)
   (%previous :accessor previous)
   (%dd :initarg :dd :initform 1.0 :accessor dd)
   (%dt :initarg :dt :initform 3.0 :accessor dt)
   (%c :initarg :c :initform 1.0 :accessor c)
   (%walls :initarg :walls :initform () :accessor walls))
  (:documentation ""))

(defclass wall ()
  ((%x :initarg :x :initform (error "X required") :accessor x)
   (%y :initarg :y :initform (error "Y required") :accessor y)
   (%w :initarg :w :initform (error "W required") :accessor w)
   (%h :initarg :h :initform (error "H required") :accessor h))
  (:documentation ""))

(defmethod initialize-instance :after ((env wave-environment) &rest rest)
  (declare (ignore rest))
  (flet ((make-fitting-array () (make-array (list (height env) (width env)) :element-type 'single-float :initial-element 0.0)))
    (unless (current env)
      (unless (and (width env) (height env))
        (error "WIDTH and HEIGHT or ENVIRONMENT must be supplied."))
      (setf (current env) (make-fitting-array)))
    (setf (width env) (array-dimension (current env) 1)
          (height env) (array-dimension (current env) 0))
    (setf (previous env) (make-fitting-array)
          (next env) (make-fitting-array))))

(defun compute-next (x y cur pre dd dt c)
  (declare (fixnum x y) (single-float dd dt c)
           ((simple-array single-float (* *)) cur pre)
           (optimize (speed 3) (safety 0)))
  (- (* (/ (+ (aref cur y (1+ x))
              (aref cur y (1- x))
              (aref cur (1+ y) x)
              (aref cur (1- y) x)
              (* -4 (aref cur y x)))
           (expt dd 2))
        (expt c 2)
        (expt dt 2))
     (* -2 (aref cur y x))
     (aref pre y x)))

(defun compute-walls (env x y)
  (dolist (wall (walls env))
    (when (and (>= x (x wall))
               (>= y (y wall))
               (< x (+ (x wall) (w wall)))
               (< y (+ (y wall) (h wall))))
      (return-from compute-walls (min (+ (x wall) (w wall))
                                      (1- (width env))))))
  x)

(defun advance (env)
  (let ((next (next env))
        (current (current env))
        (previous (previous env))
        (first (previous env))
        (dt (dt env))
        (dd (dd env))
        (c (c env)))
    (loop for y from 1 below (1- (array-dimension next 0))
          do (loop for x from 1 below (1- (array-dimension next 1))
                   do (setf x (compute-walls env x y)
                            (aref next y x)
                            (compute-next x y current previous dt dd c))))
    (setf (next env) first
          (previous env) current
          (current env) next)))

(defun start-wave (env x y magnitude)
  (when (and (< x (width env))
             (< y (height env))
             (> x 0)
             (> y 0))
    (format T "WAVE: ~d/~d~%" x y)
    (setf (aref (current env) y x) magnitude)))

(defun make-wall (env x y w h)
  (when (< w 0)
    (setf x (+ x w)
          w (- w)))
  (when (< h 0)
    (setf y (+ y h)
          h (- h)))
  (format T "WALL: ~d/~d ~d-~d~%" x y w h)
  (push (make-instance 'wall :x x :y y :w w :h h)
        (walls env))
  (loop for y from y to (+ y h)
        do (loop for x from x to (+ x w)
                 do (when (and (< x (width env))
                               (< y (height env))
                               (> x 0)
                               (> y 0))
                      (setf (aref (current env) y x) 0.0
                            (aref (previous env) y x) 0.0
                            (aref (next env) y x) 0.0)))))
